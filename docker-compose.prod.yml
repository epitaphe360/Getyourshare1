# ============================================
# Docker Compose - PRODUCTION Environment
# ShareYourSales Platform
# ============================================

version: '3.8'

services:
  # ============================================
  # PostgreSQL Database (Production)
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: shareyoursales_postgres_prod
    restart: always
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/backups:/backups  # Pour backups automatiques
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - shareyoursales_network
    # Ne pas exposer le port en production (seulement réseau interne)
    # ports:
    #   - "5432:5432"

  # ============================================
  # Redis (Production)
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: shareyoursales_redis_prod
    restart: always
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - shareyoursales_network
    # Ne pas exposer le port en production
    # ports:
    #   - "6379:6379"

  # ============================================
  # Backend FastAPI (Production)
  # ============================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: shareyoursales_backend_prod
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # App
      ENVIRONMENT: production
      APP_VERSION: ${APP_VERSION:-1.0.0}
      DEBUG: "false"

      # Database
      DATABASE_URL: postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0

      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30

      # Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}

      # Social Media APIs
      INSTAGRAM_APP_ID: ${INSTAGRAM_APP_ID}
      INSTAGRAM_APP_SECRET: ${INSTAGRAM_APP_SECRET}
      INSTAGRAM_REDIRECT_URI: ${INSTAGRAM_REDIRECT_URI}

      TIKTOK_CLIENT_KEY: ${TIKTOK_CLIENT_KEY}
      TIKTOK_CLIENT_SECRET: ${TIKTOK_CLIENT_SECRET}
      TIKTOK_REDIRECT_URI: ${TIKTOK_REDIRECT_URI}

      FACEBOOK_APP_ID: ${FACEBOOK_APP_ID}
      FACEBOOK_APP_SECRET: ${FACEBOOK_APP_SECRET}

      # Claude AI
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}

      # Sentry (MANDATORY en production)
      SENTRY_DSN: ${SENTRY_DSN}

      # Email
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}

      # Storage
      UPLOAD_DIR: /app/uploads
      MAX_UPLOAD_SIZE: 10485760  # 10MB

    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    # Ne pas exposer directement, utiliser Nginx reverse proxy
    expose:
      - "8000"
    networks:
      - shareyoursales_network
    # Production: multiple workers
    command: uvicorn server:app --host 0.0.0.0 --port 8000 --workers 4 --no-access-log

    # Limites de ressources
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # ============================================
  # Frontend React (Production Build)
  # ============================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
    container_name: shareyoursales_frontend_prod
    restart: always
    expose:
      - "80"
    networks:
      - shareyoursales_network

  # ============================================
  # Nginx Reverse Proxy (Production)
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: shareyoursales_nginx
    restart: always
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro  # Certificats SSL
      - uploads_data:/var/www/uploads:ro  # Servir fichiers statiques
    ports:
      - "80:80"
      - "443:443"
    networks:
      - shareyoursales_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # Celery Worker (Production)
  # ============================================
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: shareyoursales_celery_prod
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/1
      DATABASE_URL: postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}
      SENTRY_DSN: ${SENTRY_DSN}
    networks:
      - shareyoursales_network
    command: celery -A tasks worker --loglevel=warning --concurrency=4

    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ============================================
  # Celery Beat (Production)
  # ============================================
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: shareyoursales_celery_beat_prod
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/1
      DATABASE_URL: postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}
      SENTRY_DSN: ${SENTRY_DSN}
    networks:
      - shareyoursales_network
    command: celery -A tasks beat --loglevel=warning

  # ============================================
  # Flower (Celery Monitoring)
  # ============================================
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: shareyoursales_flower
    restart: always
    depends_on:
      - redis
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      FLOWER_BASIC_AUTH: ${FLOWER_USER}:${FLOWER_PASSWORD}
    ports:
      - "5555:5555"
    networks:
      - shareyoursales_network
    command: celery -A tasks flower --port=5555

  # ============================================
  # Backup Service (Automated Database Backups)
  # ============================================
  db_backup:
    image: postgres:15-alpine
    container_name: shareyoursales_backup
    restart: always
    depends_on:
      - postgres
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: ${DATABASE_NAME}
      PGUSER: ${DATABASE_USER}
      PGPASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - ./database/backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - shareyoursales_network
    # Backup tous les jours à 3h du matin
    command: sh -c "while true; do sleep 86400; sh /backup.sh; done"

# ============================================
# Networks
# ============================================
networks:
  shareyoursales_network:
    driver: bridge

# ============================================
# Volumes (Persistent Data)
# ============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
