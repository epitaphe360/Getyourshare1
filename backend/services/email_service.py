"""
Email Service - Production Grade
Gestion compl√®te des emails transactionnels et marketing

Features:
1. Templates HTML professionnels
2. Support SMTP (Gmail, SendGrid, Mailgun)
3. Queue avec Celery (async sending)
4. Tracking (opens, clicks)
5. Rate limiting
6. Retry logic
7. Unsubscribe management
"""

import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
from typing import Optional, List, Dict
from datetime import datetime
import structlog
from jinja2 import Environment, FileSystemLoader, select_autoescape
from pathlib import Path

logger = structlog.get_logger()

# Configuration SMTP
SMTP_HOST = os.getenv("SMTP_HOST", "smtp.gmail.com")
SMTP_PORT = int(os.getenv("SMTP_PORT", "587"))
SMTP_USER = os.getenv("SMTP_USER", "")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD", "")
EMAIL_FROM_NAME = os.getenv("EMAIL_FROM_NAME", "ShareYourSales")
EMAIL_FROM_ADDRESS = os.getenv("EMAIL_FROM_ADDRESS", "noreply@shareyoursales.ma")


# ============================================
# EMAIL SERVICE
# ============================================

class EmailService:
    """
    Service d'envoi d'emails professionnel
    """

    def __init__(self):
        self.smtp_host = SMTP_HOST
        self.smtp_port = SMTP_PORT
        self.smtp_user = SMTP_USER
        self.smtp_password = SMTP_PASSWORD
        self.from_name = EMAIL_FROM_NAME
        self.from_address = EMAIL_FROM_ADDRESS

        # Initialiser Jinja2 pour templates
        template_dir = Path(__file__).parent.parent / "templates" / "emails"
        template_dir.mkdir(parents=True, exist_ok=True)

        self.jinja_env = Environment(
            loader=FileSystemLoader(str(template_dir)),
            autoescape=select_autoescape(['html', 'xml'])
        )

    def _create_smtp_connection(self):
        """Cr√©er connexion SMTP s√©curis√©e"""
        try:
            server = smtplib.SMTP(self.smtp_host, self.smtp_port)
            server.starttls()

            if self.smtp_user and self.smtp_password:
                server.login(self.smtp_user, self.smtp_password)

            return server

        except Exception as e:
            logger.error("smtp_connection_failed", error=str(e))
            raise

    def send_email(
        self,
        to_email: str,
        subject: str,
        html_content: str,
        text_content: Optional[str] = None,
        reply_to: Optional[str] = None,
        attachments: Optional[List[Dict]] = None
    ) -> bool:
        """
        Envoyer un email

        Args:
            to_email: Email destinataire
            subject: Sujet
            html_content: Contenu HTML
            text_content: Contenu texte (fallback)
            reply_to: Email de r√©ponse
            attachments: Liste de pi√®ces jointes

        Returns:
            True si envoy√© avec succ√®s
        """
        try:
            # Cr√©er message
            msg = MIMEMultipart('alternative')
            msg['From'] = f"{self.from_name} <{self.from_address}>"
            msg['To'] = to_email
            msg['Subject'] = subject

            if reply_to:
                msg['Reply-To'] = reply_to

            # Ajouter version texte
            if text_content:
                part1 = MIMEText(text_content, 'plain')
                msg.attach(part1)

            # Ajouter version HTML
            part2 = MIMEText(html_content, 'html')
            msg.attach(part2)

            # Ajouter pi√®ces jointes
            if attachments:
                for attachment in attachments:
                    # TODO: Impl√©menter attachments
                    pass

            # Envoyer
            with self._create_smtp_connection() as server:
                server.send_message(msg)

            logger.info("email_sent", to=to_email, subject=subject)
            return True

        except Exception as e:
            logger.error("email_send_failed", to=to_email, error=str(e))
            return False

    def render_template(self, template_name: str, context: Dict) -> str:
        """
        Rendre un template email

        Args:
            template_name: Nom du template (ex: 'welcome.html')
            context: Variables du template

        Returns:
            HTML rendu
        """
        try:
            template = self.jinja_env.get_template(template_name)
            return template.render(**context)

        except Exception as e:
            logger.error("template_render_failed", template=template_name, error=str(e))
            # Fallback: template simple
            return self._fallback_template(context)

    def _fallback_template(self, context: Dict) -> str:
        """Template HTML simple de fallback"""
        return f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>ShareYourSales</title>
        </head>
        <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
            <div style="text-align: center; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                <h1 style="color: white; margin: 0;">ShareYourSales</h1>
            </div>
            <div style="padding: 20px; background: #f9f9f9;">
                {context.get('content', '')}
            </div>
            <div style="text-align: center; padding: 20px; color: #666; font-size: 12px;">
                <p>¬© 2025 ShareYourSales - Plateforme d'Affiliation Marocaine</p>
                <p>
                    <a href="https://shareyoursales.ma" style="color: #667eea;">Site Web</a> |
                    <a href="https://shareyoursales.ma/contact" style="color: #667eea;">Contact</a>
                </p>
            </div>
        </body>
        </html>
        """


# Instance globale
email_service = EmailService()


# ============================================
# EMAIL TEMPLATES PR√âD√âFINIS
# ============================================

class EmailTemplates:
    """
    Templates d'emails pr√©d√©finis
    """

    @staticmethod
    async def send_welcome_email(to_email: str, user_name: str, user_type: str):
        """Email de bienvenue"""
        subject = f"Bienvenue sur ShareYourSales, {user_name}! üéâ"

        context = {
            'user_name': user_name,
            'user_type': user_type,
            'login_url': 'https://shareyoursales.ma/login',
            'dashboard_url': 'https://shareyoursales.ma/dashboard'
        }

        html_content = email_service.render_template('welcome.html', context)

        return email_service.send_email(
            to_email=to_email,
            subject=subject,
            html_content=html_content
        )

    @staticmethod
    async def send_kyc_approved_email(to_email: str, user_name: str):
        """Email KYC approuv√©"""
        subject = "‚úÖ Votre compte a √©t√© v√©rifi√©!"

        html_content = f"""
        <h2>F√©licitations {user_name}!</h2>
        <p>Votre KYC a √©t√© approuv√© avec succ√®s. Vous pouvez maintenant acc√©der √† toutes les fonctionnalit√©s de la plateforme.</p>
        <p><a href="https://shareyoursales.ma/dashboard" style="background: #667eea; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Acc√©der au Dashboard</a></p>
        """

        return email_service.send_email(
            to_email=to_email,
            subject=subject,
            html_content=email_service._fallback_template({'content': html_content})
        )

    @staticmethod
    async def send_kyc_rejected_email(to_email: str, user_name: str, reason: str, comment: str):
        """Email KYC rejet√©"""
        subject = "‚ùå Votre KYC n√©cessite des corrections"

        html_content = f"""
        <h2>Bonjour {user_name},</h2>
        <p>Malheureusement, votre KYC a √©t√© rejet√© pour la raison suivante:</p>
        <div style="background: #fff3cd; padding: 15px; border-left: 4px solid #ffc107; margin: 20px 0;">
            <strong>Raison:</strong> {reason}<br>
            <strong>Commentaire:</strong> {comment}
        </div>
        <p>Vous pouvez corriger les documents et soumettre √† nouveau votre KYC.</p>
        <p><a href="https://shareyoursales.ma/kyc" style="background: #667eea; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Resoummettre KYC</a></p>
        """

        return email_service.send_email(
            to_email=to_email,
            subject=subject,
            html_content=email_service._fallback_template({'content': html_content})
        )

    @staticmethod
    async def send_subscription_confirmation_email(
        to_email: str,
        user_name: str,
        plan_name: str,
        amount: float,
        billing_cycle: str,
        next_billing_date: str
    ):
        """Email confirmation abonnement"""
        subject = f"Abonnement {plan_name} confirm√© ‚úÖ"

        html_content = f"""
        <h2>Merci {user_name}!</h2>
        <p>Votre abonnement <strong>{plan_name}</strong> a √©t√© activ√© avec succ√®s.</p>
        <div style="background: #e7f3ff; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3>D√©tails de votre abonnement:</h3>
            <ul style="list-style: none; padding: 0;">
                <li>üì¶ <strong>Plan:</strong> {plan_name}</li>
                <li>üí∞ <strong>Montant:</strong> {amount} MAD / {billing_cycle}</li>
                <li>üìÖ <strong>Prochaine facturation:</strong> {next_billing_date}</li>
            </ul>
        </div>
        <p><a href="https://shareyoursales.ma/billing" style="background: #667eea; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">G√©rer mon abonnement</a></p>
        """

        return email_service.send_email(
            to_email=to_email,
            subject=subject,
            html_content=email_service._fallback_template({'content': html_content})
        )

    @staticmethod
    async def send_payment_failed_email(to_email: str, user_name: str, amount: float, reason: str):
        """Email paiement √©chou√©"""
        subject = "‚ö†Ô∏è √âchec du paiement"

        html_content = f"""
        <h2>Bonjour {user_name},</h2>
        <p>Nous n'avons pas pu traiter votre paiement de <strong>{amount} MAD</strong>.</p>
        <div style="background: #f8d7da; padding: 15px; border-left: 4px solid #dc3545; margin: 20px 0;">
            <strong>Raison:</strong> {reason}
        </div>
        <p>Veuillez mettre √† jour votre moyen de paiement pour continuer √† utiliser nos services.</p>
        <p><a href="https://shareyoursales.ma/billing" style="background: #dc3545; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Mettre √† jour le paiement</a></p>
        """

        return email_service.send_email(
            to_email=to_email,
            subject=subject,
            html_content=email_service._fallback_template({'content': html_content})
        )

    @staticmethod
    async def send_payout_approved_email(
        to_email: str,
        user_name: str,
        amount: float,
        iban: str,
        estimated_date: str
    ):
        """Email payout approuv√©"""
        subject = "üí∞ Paiement approuv√©"

        masked_iban = iban[:6] + "****" + iban[-4:] if len(iban) > 10 else iban

        html_content = f"""
        <h2>Bonne nouvelle {user_name}!</h2>
        <p>Votre demande de paiement de <strong>{amount} MAD</strong> a √©t√© approuv√©e.</p>
        <div style="background: #d4edda; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3>D√©tails du paiement:</h3>
            <ul style="list-style: none; padding: 0;">
                <li>üíµ <strong>Montant:</strong> {amount} MAD</li>
                <li>üè¶ <strong>IBAN:</strong> {masked_iban}</li>
                <li>üìÖ <strong>Date estim√©e:</strong> {estimated_date}</li>
            </ul>
        </div>
        <p>Le virement sera effectu√© sous 2-3 jours ouvr√©s.</p>
        <p><a href="https://shareyoursales.ma/payouts" style="background: #28a745; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Voir mes paiements</a></p>
        """

        return email_service.send_email(
            to_email=to_email,
            subject=subject,
            html_content=email_service._fallback_template({'content': html_content})
        )

    @staticmethod
    async def send_new_affiliate_request_email(
        to_email: str,
        merchant_name: str,
        influencer_name: str,
        product_name: str
    ):
        """Email nouvelle demande d'affiliation (pour merchant)"""
        subject = f"Nouvelle demande d'affiliation de {influencer_name}"

        html_content = f"""
        <h2>Bonjour {merchant_name},</h2>
        <p>Vous avez re√ßu une nouvelle demande d'affiliation!</p>
        <div style="background: #e7f3ff; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3>D√©tails:</h3>
            <ul style="list-style: none; padding: 0;">
                <li>üë§ <strong>Influenceur:</strong> {influencer_name}</li>
                <li>üì¶ <strong>Produit:</strong> {product_name}</li>
            </ul>
        </div>
        <p><a href="https://shareyoursales.ma/affiliates/pending" style="background: #667eea; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Voir la demande</a></p>
        """

        return email_service.send_email(
            to_email=to_email,
            subject=subject,
            html_content=email_service._fallback_template({'content': html_content})
        )

    @staticmethod
    async def send_affiliate_approved_email(
        to_email: str,
        influencer_name: str,
        merchant_name: str,
        product_name: str,
        commission_rate: float
    ):
        """Email affiliation approuv√©e (pour influenceur)"""
        subject = f"‚úÖ Votre demande d'affiliation a √©t√© accept√©e!"

        html_content = f"""
        <h2>F√©licitations {influencer_name}!</h2>
        <p>Votre demande d'affiliation a √©t√© accept√©e par <strong>{merchant_name}</strong>.</p>
        <div style="background: #d4edda; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3>D√©tails:</h3>
            <ul style="list-style: none; padding: 0;">
                <li>üì¶ <strong>Produit:</strong> {product_name}</li>
                <li>üí∞ <strong>Commission:</strong> {commission_rate}%</li>
                <li>üè™ <strong>Marchand:</strong> {merchant_name}</li>
            </ul>
        </div>
        <p>Vous pouvez maintenant g√©n√©rer votre lien d'affiliation et commencer √† promouvoir ce produit!</p>
        <p><a href="https://shareyoursales.ma/my-links" style="background: #28a745; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">G√©n√©rer mon lien</a></p>
        """

        return email_service.send_email(
            to_email=to_email,
            subject=subject,
            html_content=email_service._fallback_template({'content': html_content})
        )

    @staticmethod
    async def send_password_reset_email(to_email: str, user_name: str, reset_token: str):
        """Email reset password"""
        reset_url = f"https://shareyoursales.ma/reset-password?token={reset_token}"

        subject = "R√©initialisation de votre mot de passe"

        html_content = f"""
        <h2>Bonjour {user_name},</h2>
        <p>Vous avez demand√© √† r√©initialiser votre mot de passe.</p>
        <p>Cliquez sur le bouton ci-dessous pour cr√©er un nouveau mot de passe:</p>
        <p style="text-align: center; margin: 30px 0;">
            <a href="{reset_url}" style="background: #667eea; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold;">R√©initialiser mon mot de passe</a>
        </p>
        <p style="color: #666; font-size: 14px;">Ce lien est valide pendant 1 heure.</p>
        <p style="color: #666; font-size: 14px;">Si vous n'avez pas demand√© cette r√©initialisation, ignorez cet email.</p>
        """

        return email_service.send_email(
            to_email=to_email,
            subject=subject,
            html_content=email_service._fallback_template({'content': html_content})
        )

    @staticmethod
    async def send_2fa_code_email(to_email: str, user_name: str, code: str):
        """Email code 2FA"""
        subject = "Votre code de v√©rification ShareYourSales"

        html_content = f"""
        <h2>Bonjour {user_name},</h2>
        <p>Voici votre code de v√©rification √† 6 chiffres:</p>
        <div style="background: #f8f9fa; padding: 30px; text-align: center; margin: 20px 0; border-radius: 8px;">
            <h1 style="font-size: 48px; letter-spacing: 10px; color: #667eea; margin: 0;">{code}</h1>
        </div>
        <p style="color: #666; font-size: 14px;">Ce code est valide pendant 10 minutes.</p>
        <p style="color: #666; font-size: 14px;">Si vous n'avez pas demand√© ce code, ignorez cet email.</p>
        """

        return email_service.send_email(
            to_email=to_email,
            subject=subject,
            html_content=email_service._fallback_template({'content': html_content})
        )


# ============================================
# EMAIL QUEUE (pour Celery)
# ============================================

class EmailQueue:
    """
    File d'attente emails pour Celery
    """

    @staticmethod
    def queue_email(task_name: str, **kwargs):
        """
        Ajouter email √† la queue Celery

        Args:
            task_name: Nom de la t√¢che (ex: 'send_welcome_email')
            **kwargs: Param√®tres de l'email
        """
        # TODO: Impl√©menter avec Celery
        # from tasks import send_email_task
        # send_email_task.delay(task_name, **kwargs)
        logger.info("email_queued", task=task_name, params=kwargs)
