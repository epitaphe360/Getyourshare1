"""
Script complet pour configurer Supabase :
1. Cr√©er toutes les tables
2. Migrer toutes les donn√©es MOCK
"""

import os
import sys
from dotenv import load_dotenv
from supabase import create_client, Client
import bcrypt
from datetime import datetime
import json

# Charger les variables d'environnement
load_dotenv()

# Importer les donn√©es MOCK
sys.path.insert(0, os.path.dirname(__file__))
from mock_data import *

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_SERVICE_ROLE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY")

# Client Supabase avec droits admin
supabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)

print("=" * 70)
print("üöÄ SETUP SUPABASE - ShareYourSales")
print("=" * 70)
print(f"üìç URL: {SUPABASE_URL}\n")

# ============================================
# √âTAPE 1: Cr√©er les tables
# ============================================

print("üìã √âTAPE 1: Cr√©ation des tables")
print("-" * 70)


def read_sql_file():
    """Lit le fichier schema.sql"""
    schema_path = os.path.join(os.path.dirname(__file__), "..", "database", "schema.sql")
    with open(schema_path, "r", encoding="utf-8") as f:
        return f.read()


# Pour cr√©er les tables, on doit utiliser l'√©diteur SQL de Supabase ou psycopg2
print(
    """
‚ö†Ô∏è  Pour cr√©er les tables dans Supabase:

M√©thode 1 (Recommand√©e):
1. Allez sur: https://iamezkmapbhlhhvvsits.supabase.co/project/_/sql
2. Copiez TOUT le contenu de 'database/schema.sql'
3. Collez dans l'√©diteur SQL
4. Cliquez sur 'RUN' pour ex√©cuter

M√©thode 2 (Avanc√©e):
Utilisez psycopg2 avec l'URL de connexion PostgreSQL directe.

Une fois les tables cr√©√©es, relancez ce script pour migrer les donn√©es.
"""
)

response = input("\n‚úÖ Tables cr√©√©es? (o/n): ").strip().lower()

if response != "o":
    print("‚ùå Veuillez d'abord cr√©er les tables dans Supabase.")
    print(f"üìÑ Fichier SQL: database/schema.sql")
    sys.exit(1)

# ============================================
# √âTAPE 2: Migrer les utilisateurs
# ============================================

print("\nüìã √âTAPE 2: Migration des utilisateurs")
print("-" * 70)


def migrate_users():
    """Migrer les utilisateurs MOCK vers Supabase"""
    print(f"üë§ Migration de {len(MOCK_USERS)} utilisateurs...")

    for user in MOCK_USERS:
        try:
            # Pr√©parer les donn√©es utilisateur
            user_data = {
                "email": user["email"],
                "password_hash": user["password"],  # D√©j√† hash√© avec bcrypt
                "role": user["role"],
                "phone": user.get("phone"),
                "phone_verified": user.get("phone_verified", False),
                "two_fa_enabled": user.get("two_fa_enabled", False),
                "last_login": user.get("last_login"),
                "is_active": user.get("is_active", True),
            }

            # Ins√©rer dans Supabase
            result = supabase.table("users").insert(user_data).execute()

            print(f"  ‚úÖ {user['email']} ({user['role']})")

        except Exception as e:
            print(f"  ‚ùå Erreur pour {user['email']}: {str(e)}")


migrate_users()

# ============================================
# √âTAPE 3: Migrer les merchants
# ============================================

print("\nüìã √âTAPE 3: Migration des merchants")
print("-" * 70)


def migrate_merchants():
    """Migrer les merchants MOCK vers Supabase"""
    print(f"üè¢ Migration de {len(MOCK_MERCHANTS)} merchants...")

    # D'abord, r√©cup√©rer les user_id des merchants depuis Supabase
    users_result = supabase.table("users").select("id, email").eq("role", "merchant").execute()
    email_to_user_id = {u["email"]: u["id"] for u in users_result.data}

    for merchant in MOCK_MERCHANTS:
        try:
            # Trouver le user_id correspondant
            user_email = merchant.get("user_email")
            if not user_email:
                # Essayer de deviner bas√© sur l'index
                if merchant["id"] == "merchant_1":
                    user_email = "contact@techstyle.fr"
                elif merchant["id"] == "merchant_2":
                    user_email = "hello@beautypro.com"

            user_id = email_to_user_id.get(user_email)
            if not user_id:
                print(f"  ‚ö†Ô∏è  User introuvable pour {merchant['company_name']}")
                continue

            merchant_data = {
                "user_id": user_id,
                "company_name": merchant["company_name"],
                "industry": merchant.get("industry"),
                "category": merchant.get("category"),
                "website": merchant.get("website"),
                "description": merchant.get("description"),
                "subscription_plan": merchant.get("subscription_plan", "free"),
                "commission_rate": merchant.get("commission_rate", 5.0),
                "total_sales": merchant.get("total_sales", 0),
                "total_commission_paid": merchant.get("total_commission_paid", 0),
            }

            result = supabase.table("merchants").insert(merchant_data).execute()
            print(f"  ‚úÖ {merchant['company_name']}")

        except Exception as e:
            print(f"  ‚ùå Erreur pour {merchant['company_name']}: {str(e)}")


migrate_merchants()

# ============================================
# √âTAPE 4: Migrer les influencers
# ============================================

print("\nüìã √âTAPE 4: Migration des influencers")
print("-" * 70)


def migrate_influencers():
    """Migrer les influencers MOCK vers Supabase"""
    print(f"‚≠ê Migration de {len(MOCK_INFLUENCERS)} influencers...")

    # R√©cup√©rer les user_id des influencers depuis Supabase
    users_result = supabase.table("users").select("id, email").eq("role", "influencer").execute()
    email_to_user_id = {u["email"]: u["id"] for u in users_result.data}

    for influencer in MOCK_INFLUENCERS:
        try:
            # Trouver le user_id correspondant
            user_email = influencer.get("user_email")
            if not user_email:
                # Essayer de deviner
                if influencer["id"] == "influencer_1":
                    user_email = "emma.style@instagram.com"
                elif influencer["id"] == "influencer_2":
                    user_email = "lucas.tech@youtube.com"
                elif influencer["id"] == "influencer_3":
                    user_email = "julie.beauty@tiktok.com"

            user_id = email_to_user_id.get(user_email)
            if not user_id:
                print(f"  ‚ö†Ô∏è  User introuvable pour {influencer['full_name']}")
                continue

            influencer_data = {
                "user_id": user_id,
                "username": influencer["username"],
                "full_name": influencer["full_name"],
                "bio": influencer.get("bio"),
                "category": influencer.get("category"),
                "influencer_type": influencer.get("influencer_type"),
                "audience_size": influencer.get("audience_size", 0),
                "engagement_rate": influencer.get("engagement_rate", 0.0),
                "subscription_plan": influencer.get("subscription_plan", "starter"),
                "total_clicks": influencer.get("total_clicks", 0),
                "total_sales": influencer.get("total_sales", 0),
                "total_earnings": influencer.get("total_earnings", 0.0),
                "balance": influencer.get("balance", 0.0),
                "social_links": json.dumps(influencer.get("social_links", {})),
            }

            result = supabase.table("influencers").insert(influencer_data).execute()
            print(f"  ‚úÖ {influencer['full_name']} (@{influencer['username']})")

        except Exception as e:
            print(f"  ‚ùå Erreur pour {influencer['full_name']}: {str(e)}")


migrate_influencers()

# ============================================
# √âTAPE 5: Migrer les produits
# ============================================

print("\nüìã √âTAPE 5: Migration des produits")
print("-" * 70)


def migrate_products():
    """Migrer les produits MOCK vers Supabase"""
    print(f"üì¶ Migration de {len(MOCK_PRODUCTS)} produits...")

    # R√©cup√©rer les merchant_id depuis Supabase
    merchants_result = supabase.table("merchants").select("id, company_name").execute()
    company_to_merchant_id = {m["company_name"]: m["id"] for m in merchants_result.data}

    for product in MOCK_PRODUCTS:
        try:
            # Trouver le merchant_id
            merchant_name = product.get("merchant_name", "TechStyle")
            merchant_id = company_to_merchant_id.get(merchant_name)

            if not merchant_id:
                # Utiliser le premier merchant par d√©faut
                merchant_id = merchants_result.data[0]["id"] if merchants_result.data else None

            if not merchant_id:
                print(f"  ‚ö†Ô∏è  Merchant introuvable pour {product['name']}")
                continue

            product_data = {
                "merchant_id": merchant_id,
                "name": product["name"],
                "description": product.get("description"),
                "category": product["category"],
                "price": product["price"],
                "commission_rate": product["commission_rate"],
                "commission_type": "percentage",
                "images": json.dumps(product.get("images", [])),
                "slug": product.get("slug"),
                "stock_quantity": product.get("stock", 0),
                "is_available": product.get("is_available", True),
            }

            result = supabase.table("products").insert(product_data).execute()
            print(f"  ‚úÖ {product['name']} ({product['category']})")

        except Exception as e:
            print(f"  ‚ùå Erreur pour {product['name']}: {str(e)}")


migrate_products()

# ============================================
# FINALISATION
# ============================================

print("\n" + "=" * 70)
print("‚úÖ MIGRATION TERMIN√âE !")
print("=" * 70)
print(
    """
Prochaines √©tapes:
1. V√©rifiez les donn√©es dans Supabase
2. Testez l'application backend
3. L'application utilise maintenant Supabase au lieu des donn√©es MOCK

üìä Dashboard Supabase: https://iamezkmapbhlhhvvsits.supabase.co
"""
)
