"""
Admin Social Media Dashboard Endpoints
Gestion des publications sociales admin (publicit√© plateforme)

Endpoints:
- POST /api/admin/social/posts - Cr√©er un post
- POST /api/admin/social/posts/{id}/publish - Publier sur r√©seaux sociaux
- GET /api/admin/social/posts - Liste des posts
- GET /api/admin/social/posts/{id} - D√©tail d'un post
- PATCH /api/admin/social/posts/{id} - Modifier un post
- DELETE /api/admin/social/posts/{id} - Supprimer un post
- POST /api/admin/social/posts/{id}/schedule - Programmer une publication
- GET /api/admin/social/templates - Templates de posts
- POST /api/admin/social/templates - Cr√©er un template
- GET /api/admin/social/analytics - Analytics globales
"""

from fastapi import APIRouter, Depends, HTTPException, status
from pydantic import BaseModel, Field, HttpUrl
from typing import Optional, List, Dict
from datetime import datetime
import structlog
import re

from auth import get_current_admin
from supabase_client import supabase
from services.social_auto_publish_service import auto_publisher

router = APIRouter(prefix="/api/admin/social", tags=["Admin Social Media"])
logger = structlog.get_logger()


# ============================================
# PYDANTIC MODELS
# ============================================

class CreateAdminPostRequest(BaseModel):
    """Cr√©er un post admin"""
    title: Optional[str] = Field(None, max_length=500)
    caption: str = Field(..., min_length=10, description="Caption du post")
    media_urls: List[str] = Field(default=[], description="URLs des m√©dias (images/vid√©os)")
    media_type: str = Field(default="image", pattern="^(image|video|carousel|text)$")
    cta_text: Optional[str] = Field(None, max_length=255, description="Texte du call-to-action")
    cta_url: Optional[HttpUrl] = Field(None, description="URL du call-to-action")
    hashtags: List[str] = Field(default=[], description="Liste de hashtags")
    campaign_type: str = Field(
        default="general",
        pattern="^(general|app_launch|new_feature|merchant_recruitment|influencer_recruitment|seasonal_promo|user_testimonial|milestone_celebration|contest)$"
    )
    template_id: Optional[str] = Field(None, description="ID du template utilis√©")

    class Config:
        json_schema_extra = {
            "example": {
                "title": "Lancement ShareYourSales",
                "caption": "üöÄ La plateforme qui connecte influenceurs et marchands au Maroc est enfin l√†!",
                "media_urls": ["https://example.com/image.jpg"],
                "media_type": "image",
                "cta_text": "T√©l√©charger maintenant!",
                "cta_url": "https://shareyoursales.ma",
                "hashtags": ["#ShareYourSales", "#MarocDigital", "#Influenceurs"],
                "campaign_type": "app_launch"
            }
        }


class PublishPostRequest(BaseModel):
    """Publier un post sur les r√©seaux sociaux"""
    platforms: List[str] = Field(..., description="Plateformes (instagram, facebook, tiktok, twitter, linkedin)")
    publish_now: bool = Field(default=True, description="Publier imm√©diatement ou programmer")
    scheduled_for: Optional[datetime] = Field(None, description="Date/heure de publication programm√©e")

    class Config:
        json_schema_extra = {
            "example": {
                "platforms": ["instagram", "facebook", "linkedin"],
                "publish_now": True
            }
        }


class UpdateAdminPostRequest(BaseModel):
    """Mettre √† jour un post"""
    title: Optional[str] = None
    caption: Optional[str] = None
    media_urls: Optional[List[str]] = None
    cta_text: Optional[str] = None
    cta_url: Optional[HttpUrl] = None
    hashtags: Optional[List[str]] = None
    status: Optional[str] = Field(None, pattern="^(draft|scheduled|published|failed|archived)$")


class CreateTemplateRequest(BaseModel):
    """Cr√©er un template de post"""
    name: str = Field(..., min_length=3, max_length=255)
    description: Optional[str] = None
    category: str = Field(default="general")
    caption_template: str = Field(..., min_length=10, description="Template avec variables {{var}}")
    suggested_hashtags: List[str] = Field(default=[])
    suggested_cta_text: Optional[str] = None
    suggested_cta_url: Optional[str] = None
    example_media_url: Optional[str] = None
    media_type: str = Field(default="image")


# ============================================
# ADMIN SOCIAL POSTS ENDPOINTS
# ============================================

@router.post("/posts", response_model=dict, status_code=201)
async def create_admin_post(
    post_data: CreateAdminPostRequest,
    current_admin: dict = Depends(get_current_admin)
):
    """
    Cr√©er un post pour promouvoir la plateforme

    **Types de campagne:**
    - general: Post g√©n√©ral
    - app_launch: Lancement app
    - new_feature: Nouvelle fonctionnalit√©
    - merchant_recruitment: Recrutement marchands
    - influencer_recruitment: Recrutement influenceurs
    - seasonal_promo: Promotion saisonni√®re
    - user_testimonial: T√©moignage utilisateur
    - milestone_celebration: C√©l√©bration d'un jalon
    - contest: Concours

    **Returns:**
    - Post cr√©√© en brouillon
    - Peut √™tre publi√© ensuite via /publish
    """
    admin_id = current_admin.get("id")

    try:
        # Si un template est utilis√©, incr√©menter son usage
        if post_data.template_id:
            supabase.rpc('increment_template_usage', {'template_id': post_data.template_id}).execute()

        # Pr√©parer les donn√©es du post
        post_dict = {
            'created_by': admin_id,
            'title': post_data.title,
            'caption': post_data.caption,
            'media_urls': post_data.media_urls,
            'media_type': post_data.media_type,
            'cta_text': post_data.cta_text,
            'cta_url': str(post_data.cta_url) if post_data.cta_url else None,
            'hashtags': post_data.hashtags,
            'campaign_type': post_data.campaign_type,
            'platforms': {},
            'status': 'draft',
            'created_at': datetime.utcnow().isoformat()
        }

        # Cr√©er le post
        result = supabase.table('admin_social_posts').insert(post_dict).execute()

        if not result.data:
            raise Exception("Failed to create admin post")

        post = result.data[0]

        logger.info("admin_post_created",
                   admin_id=admin_id,
                   post_id=post['id'],
                   campaign_type=post_data.campaign_type)

        return {
            "success": True,
            "message": "Post cr√©√© avec succ√®s",
            "post": post
        }

    except Exception as e:
        logger.error("create_admin_post_failed", admin_id=admin_id, error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la cr√©ation du post"
        )


@router.post("/posts/{post_id}/publish", response_model=dict)
async def publish_admin_post(
    post_id: str,
    publish_data: PublishPostRequest,
    current_admin: dict = Depends(get_current_admin)
):
    """
    Publier un post sur les r√©seaux sociaux

    **Process:**
    1. R√©cup√©rer le post
    2. V√©rifier qu'il est en brouillon
    3. Publier sur les plateformes s√©lectionn√©es
    4. Mettre √† jour le statut

    **Plateformes support√©es:**
    - instagram: Page Instagram officielle
    - facebook: Page Facebook officielle
    - tiktok: Compte TikTok officiel
    - twitter: Compte Twitter officiel (TODO)
    - linkedin: Page LinkedIn entreprise (TODO)

    **Returns:**
    - R√©sultat de publication par plateforme
    """
    admin_id = current_admin.get("id")

    try:
        # R√©cup√©rer le post
        post_result = supabase.table('admin_social_posts').select('*').eq('id', post_id).execute()

        if not post_result.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Post non trouv√©"
            )

        post = post_result.data[0]

        # V√©rifier le statut
        if post['status'] == 'published':
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Ce post a d√©j√† √©t√© publi√©"
            )

        # Si publication programm√©e
        if not publish_data.publish_now and publish_data.scheduled_for:
            # Mettre √† jour avec date de programmation
            supabase.table('admin_social_posts').update({
                'status': 'scheduled',
                'scheduled_for': publish_data.scheduled_for.isoformat(),
                'updated_at': datetime.utcnow().isoformat()
            }).eq('id', post_id).execute()

            logger.info("admin_post_scheduled", post_id=post_id, scheduled_for=publish_data.scheduled_for)

            return {
                "success": True,
                "message": f"Post programm√© pour le {publish_data.scheduled_for}",
                "scheduled_for": publish_data.scheduled_for.isoformat()
            }

        # Publication imm√©diate
        # Pr√©parer la caption compl√®te avec hashtags
        full_caption = post['caption']
        if post.get('hashtags'):
            full_caption += "\n\n" + " ".join([f"#{tag.lstrip('#')}" for tag in post['hashtags']])

        if post.get('cta_text') and post.get('cta_url'):
            full_caption += f"\n\nüëâ {post['cta_text']}\n{post['cta_url']}"

        # Pr√©parer les m√©dias
        media_urls = {
            "default": post['media_urls'][0] if post.get('media_urls') else "https://via.placeholder.com/1080x1080"
        }

        # Ajouter m√©dia sp√©cifique par plateforme si disponible
        for i, platform in enumerate(publish_data.platforms):
            if i < len(post.get('media_urls', [])):
                media_urls[platform] = post['media_urls'][i]
            else:
                media_urls[platform] = media_urls["default"]

        # Publier sur toutes les plateformes
        # Note: Pour l'admin, on utilise les comptes officiels de la plateforme
        # Il faut avoir configur√© les tokens d'acc√®s dans social_media_accounts pour un user "platform_admin"

        # R√©cup√©rer l'ID du compte admin plateforme (celui qui a les tokens des comptes officiels)
        platform_admin_result = supabase.table('users').select('id').eq('role', 'admin').eq('email', 'admin@shareyoursales.ma').execute()

        if not platform_admin_result.data:
            # Fallback: utiliser l'admin actuel (il doit avoir connect√© les comptes sociaux)
            platform_admin_id = admin_id
        else:
            platform_admin_id = platform_admin_result.data[0]['id']

        # Publier
        publication_results = {
            "published": [],
            "failed": []
        }

        for platform in publish_data.platforms:
            try:
                # G√©n√©rer caption_data format
                caption_data = {
                    "caption": post['caption'],
                    "full_text": full_caption,
                    "hashtags": post.get('hashtags', []),
                    "call_to_action": post.get('cta_text', '')
                }

                # Publier selon la plateforme
                if platform == "instagram":
                    result = await auto_publisher.publish_to_instagram(
                        user_id=platform_admin_id,
                        product_id=None,  # Post admin, pas de produit
                        affiliate_link=post.get('cta_url', ''),
                        image_url=media_urls.get('instagram', media_urls['default']),
                        caption_data=caption_data,
                        post_type='feed'
                    )

                elif platform == "facebook":
                    result = await auto_publisher.publish_to_facebook(
                        user_id=platform_admin_id,
                        product_id=None,
                        affiliate_link=post.get('cta_url', ''),
                        image_url=media_urls.get('facebook', media_urls['default']),
                        caption_data=caption_data,
                        target_type='page'
                    )

                elif platform == "tiktok":
                    result = await auto_publisher.publish_to_tiktok(
                        user_id=platform_admin_id,
                        product_id=None,
                        affiliate_link=post.get('cta_url', ''),
                        video_url=media_urls.get('tiktok', media_urls['default']),
                        caption_data=caption_data
                    )

                else:
                    # Plateforme non support√©e pour l'instant
                    result = {
                        "success": False,
                        "error": f"Plateforme {platform} non encore support√©e",
                        "platform": platform
                    }

                if result.get("success"):
                    publication_results["published"].append(result)
                else:
                    publication_results["failed"].append(result)

            except Exception as e:
                logger.error("platform_publish_failed", platform=platform, error=str(e))
                publication_results["failed"].append({
                    "platform": platform,
                    "error": str(e)
                })

        # Mettre √† jour le post avec les r√©sultats
        platforms_status = {}
        for pub in publication_results["published"]:
            platforms_status[pub['platform']] = {
                "post_id": pub.get('post_id'),
                "url": pub.get('url'),
                "status": "published",
                "published_at": datetime.utcnow().isoformat()
            }

        for fail in publication_results["failed"]:
            platforms_status[fail['platform']] = {
                "status": "failed",
                "error": fail.get('error')
            }

        # Update post
        supabase.table('admin_social_posts').update({
            'status': 'published' if len(publication_results["published"]) > 0 else 'failed',
            'platforms': platforms_status,
            'published_at': datetime.utcnow().isoformat() if len(publication_results["published"]) > 0 else None,
            'updated_at': datetime.utcnow().isoformat()
        }).eq('id', post_id).execute()

        logger.info("admin_post_published",
                   post_id=post_id,
                   admin_id=admin_id,
                   published=len(publication_results["published"]),
                   failed=len(publication_results["failed"]))

        return {
            "success": len(publication_results["published"]) > 0,
            "message": f"Post publi√© sur {len(publication_results['published'])} plateformes",
            "published": publication_results["published"],
            "failed": publication_results["failed"]
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error("publish_admin_post_failed", post_id=post_id, error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la publication"
        )


@router.get("/posts", response_model=dict)
async def get_admin_posts(
    page: int = 1,
    limit: int = 20,
    status_filter: Optional[str] = None,
    campaign_type: Optional[str] = None,
    current_admin: dict = Depends(get_current_admin)
):
    """
    Liste de tous les posts admin

    **Filters:**
    - status: draft, scheduled, published, failed, archived
    - campaign_type: general, app_launch, new_feature, etc.

    **Returns:**
    - Liste des posts avec infos cr√©ateur
    """
    try:
        offset = (page - 1) * limit

        query = supabase.table('v_admin_social_posts_summary').select('*', count='exact')

        if status_filter:
            query = query.eq('status', status_filter)

        if campaign_type:
            query = query.eq('campaign_type', campaign_type)

        query = query.order('created_at', desc=True).range(offset, offset + limit - 1)

        result = query.execute()

        return {
            "success": True,
            "posts": result.data or [],
            "total": result.count or 0,
            "page": page,
            "limit": limit,
            "total_pages": ((result.count or 0) + limit - 1) // limit
        }

    except Exception as e:
        logger.error("get_admin_posts_failed", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la r√©cup√©ration des posts"
        )


@router.get("/posts/{post_id}", response_model=dict)
async def get_admin_post_detail(
    post_id: str,
    current_admin: dict = Depends(get_current_admin)
):
    """
    D√©tail d'un post admin

    **Returns:**
    - Post complet
    - Statut de publication par plateforme
    - Analytics si disponibles
    """
    try:
        result = supabase.table('admin_social_posts').select('*').eq('id', post_id).execute()

        if not result.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Post non trouv√©"
            )

        post = result.data[0]

        # Enrichir avec info cr√©ateur
        if post.get('created_by'):
            creator_result = supabase.table('users').select('id, email, first_name, last_name').eq('id', post['created_by']).execute()
            if creator_result.data:
                post['creator'] = creator_result.data[0]

        return {
            "success": True,
            "post": post
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error("get_admin_post_detail_failed", post_id=post_id, error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la r√©cup√©ration du post"
        )


@router.patch("/posts/{post_id}", response_model=dict)
async def update_admin_post(
    post_id: str,
    update_data: UpdateAdminPostRequest,
    current_admin: dict = Depends(get_current_admin)
):
    """
    Modifier un post admin

    **Limitations:**
    - Cannot modify published posts (use archive first)
    """
    try:
        # V√©rifier que le post existe
        post_result = supabase.table('admin_social_posts').select('*').eq('id', post_id).execute()

        if not post_result.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Post non trouv√©"
            )

        post = post_result.data[0]

        # Ne pas modifier un post publi√© (sauf pour changer le statut en archived)
        if post['status'] == 'published' and update_data.status != 'archived':
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Impossible de modifier un post publi√©. Archivez-le d'abord."
            )

        # Pr√©parer update
        update_dict = {
            'updated_at': datetime.utcnow().isoformat()
        }

        if update_data.title is not None:
            update_dict['title'] = update_data.title

        if update_data.caption is not None:
            update_dict['caption'] = update_data.caption

        if update_data.media_urls is not None:
            update_dict['media_urls'] = update_data.media_urls

        if update_data.cta_text is not None:
            update_dict['cta_text'] = update_data.cta_text

        if update_data.cta_url is not None:
            update_dict['cta_url'] = str(update_data.cta_url)

        if update_data.hashtags is not None:
            update_dict['hashtags'] = update_data.hashtags

        if update_data.status is not None:
            update_dict['status'] = update_data.status

        # Update
        result = supabase.table('admin_social_posts').update(update_dict).eq('id', post_id).execute()

        logger.info("admin_post_updated", post_id=post_id, admin_id=current_admin.get('id'))

        return {
            "success": True,
            "message": "Post mis √† jour avec succ√®s",
            "post": result.data[0] if result.data else None
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error("update_admin_post_failed", post_id=post_id, error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la mise √† jour du post"
        )


@router.delete("/posts/{post_id}", response_model=dict)
async def delete_admin_post(
    post_id: str,
    current_admin: dict = Depends(get_current_admin)
):
    """
    Supprimer un post admin

    **Note:** On archive plut√¥t que de supprimer r√©ellement
    """
    try:
        # V√©rifier existence
        post_result = supabase.table('admin_social_posts').select('*').eq('id', post_id).execute()

        if not post_result.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Post non trouv√©"
            )

        # Archiver au lieu de supprimer
        supabase.table('admin_social_posts').update({
            'status': 'archived',
            'updated_at': datetime.utcnow().isoformat()
        }).eq('id', post_id).execute()

        logger.info("admin_post_archived", post_id=post_id, admin_id=current_admin.get('id'))

        return {
            "success": True,
            "message": "Post archiv√© avec succ√®s"
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error("delete_admin_post_failed", post_id=post_id, error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la suppression du post"
        )


# ============================================
# TEMPLATES ENDPOINTS
# ============================================

@router.get("/templates", response_model=dict)
async def get_post_templates(
    category: Optional[str] = None,
    current_admin: dict = Depends(get_current_admin)
):
    """
    R√©cup√©rer les templates de posts

    **Returns:**
    - Templates avec variables {{variable}}
    - Hashtags sugg√©r√©s
    - CTA sugg√©r√©
    """
    try:
        query = supabase.table('admin_social_post_templates').select('*').eq('is_active', True)

        if category:
            query = query.eq('category', category)

        query = query.order('usage_count', desc=True)

        result = query.execute()

        return {
            "success": True,
            "templates": result.data or []
        }

    except Exception as e:
        logger.error("get_templates_failed", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la r√©cup√©ration des templates"
        )


@router.post("/templates", response_model=dict, status_code=201)
async def create_post_template(
    template_data: CreateTemplateRequest,
    current_admin: dict = Depends(get_current_admin)
):
    """
    Cr√©er un nouveau template de post

    **Variables disponibles:**
    - {{app_name}}, {{app_url}}
    - {{user_name}}, {{user_role}}
    - {{commission}}, {{influencer_count}}
    - {{feature_name}}, {{feature_description}}
    - {{testimonial_text}}
    - {{metric_1}}, {{metric_2}}, {{metric_3}}
    - {{season}}, {{promo_description}}, {{end_date}}
    - {{prize_description}}, {{draw_date}}
    - {{milestone_number}}, {{milestone_type}}
    - etc.
    """
    try:
        template_dict = {
            'name': template_data.name,
            'description': template_data.description,
            'category': template_data.category,
            'caption_template': template_data.caption_template,
            'suggested_hashtags': template_data.suggested_hashtags,
            'suggested_cta_text': template_data.suggested_cta_text,
            'suggested_cta_url': template_data.suggested_cta_url,
            'example_media_url': template_data.example_media_url,
            'media_type': template_data.media_type,
            'is_active': True,
            'created_at': datetime.utcnow().isoformat()
        }

        result = supabase.table('admin_social_post_templates').insert(template_dict).execute()

        logger.info("template_created", admin_id=current_admin.get('id'), template_name=template_data.name)

        return {
            "success": True,
            "message": "Template cr√©√© avec succ√®s",
            "template": result.data[0] if result.data else None
        }

    except Exception as e:
        logger.error("create_template_failed", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la cr√©ation du template"
        )


# ============================================
# ANALYTICS ENDPOINTS
# ============================================

@router.get("/analytics", response_model=dict)
async def get_admin_social_analytics(current_admin: dict = Depends(get_current_admin)):
    """
    Analytics des publications admin

    **Returns:**
    - Total posts publi√©s
    - Engagement global (vues, likes, commentaires, partages, clics)
    - Performance par plateforme
    - Performance par type de campagne
    - Taux d'engagement
    """
    try:
        # Stats globales depuis la vue
        global_stats_result = supabase.table('v_admin_social_analytics').select('*').execute()

        if global_stats_result.data:
            global_stats = global_stats_result.data[0]
        else:
            global_stats = {}

        # Stats par plateforme (parser le JSONB platforms)
        # TODO: Am√©liorer avec requ√™te PostgREST avanc√©e

        # Stats par type de campagne
        campaign_stats = {}
        campaign_types = ['general', 'app_launch', 'new_feature', 'merchant_recruitment', 'influencer_recruitment', 'seasonal_promo', 'user_testimonial', 'milestone_celebration', 'contest']

        for ctype in campaign_types:
            ctype_result = supabase.table('admin_social_posts').select('*', count='exact').eq('campaign_type', ctype).eq('status', 'published').execute()
            campaign_stats[ctype] = ctype_result.count or 0

        return {
            "success": True,
            "global_stats": global_stats,
            "by_campaign_type": campaign_stats
        }

    except Exception as e:
        logger.error("get_analytics_failed", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la r√©cup√©ration des analytics"
        )
