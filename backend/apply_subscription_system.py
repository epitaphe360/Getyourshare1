#!/usr/bin/env python3
"""
Script de migration pour appliquer le syst√®me d'abonnement SaaS
Ce script cr√©e toutes les tables n√©cessaires et ins√®re les plans par d√©faut
"""

import os
import sys
from dotenv import load_dotenv
from supabase_client import supabase

# Charger les variables d'environnement
load_dotenv()


def read_sql_file(filename):
    """Lit un fichier SQL et retourne son contenu"""
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            return file.read()
    except FileNotFoundError:
        print(f"‚ùå Erreur: Le fichier {filename} n'a pas √©t√© trouv√©")
        return None
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture du fichier: {e}")
        return None


def execute_sql(sql_content):
    """Ex√©cute du code SQL via Supabase"""
    try:
        # Split le SQL en statements individuels
        statements = []
        current_statement = []

        for line in sql_content.split('\n'):
            # Ignorer les commentaires
            if line.strip().startswith('--'):
                continue

            current_statement.append(line)

            # Si la ligne se termine par ; , c'est la fin d'un statement
            if line.strip().endswith(';'):
                statement = '\n'.join(current_statement)
                if statement.strip():
                    statements.append(statement)
                current_statement = []

        print(f"üìù {len(statements)} statements SQL √† ex√©cuter\n")

        # Ex√©cuter chaque statement
        for i, statement in enumerate(statements, 1):
            try:
                # Les statements CREATE TABLE, CREATE INDEX, etc. doivent √™tre ex√©cut√©s via RPC
                result = supabase.rpc('exec_sql', {'query': statement}).execute()
                print(f"‚úÖ Statement {i}/{len(statements)} ex√©cut√© avec succ√®s")
            except Exception as e:
                # Si la fonction RPC n'existe pas, on utilise une approche alternative
                # Certaines installations Supabase n√©cessitent l'ex√©cution via le dashboard SQL
                print(f"‚ö†Ô∏è  Statement {i}/{len(statements)}: {str(e)[:100]}")

        return True

    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution SQL: {e}")
        return False


def check_tables_exist():
    """V√©rifie si les tables d'abonnement existent d√©j√†"""
    try:
        result = supabase.table("subscription_plans").select("id").limit(1).execute()
        return True
    except:
        return False


def main():
    """Fonction principale"""
    print("="*70)
    print("üöÄ APPLICATION DU SYST√àME D'ABONNEMENT SaaS")
    print("="*70)
    print()

    # V√©rifier la connexion Supabase
    print("üîç V√©rification de la connexion Supabase...")
    try:
        result = supabase.table("users").select("id").limit(1).execute()
        print("‚úÖ Connexion Supabase OK\n")
    except Exception as e:
        print(f"‚ùå Erreur de connexion Supabase: {e}")
        print("\n‚ö†Ô∏è  V√©rifiez vos credentials dans le fichier .env")
        sys.exit(1)

    # V√©rifier si les tables existent d√©j√†
    print("üîç V√©rification des tables existantes...")
    if check_tables_exist():
        print("‚ö†Ô∏è  Les tables d'abonnement existent d√©j√†!")
        response = input("\n‚ùì Voulez-vous continuer quand m√™me? (yes/no): ")
        if response.lower() != 'yes':
            print("\n‚ùå Op√©ration annul√©e")
            sys.exit(0)
    else:
        print("‚úÖ Aucune table d'abonnement trouv√©e, pr√™t √† cr√©er\n")

    # Lire le fichier SQL
    print("üìñ Lecture du fichier SQL...")
    sql_content = read_sql_file('create_subscription_tables.sql')

    if not sql_content:
        print("\n‚ùå Impossible de lire le fichier SQL")
        print("\nüí° Assurez-vous que le fichier 'create_subscription_tables.sql' existe dans le m√™me dossier")
        sys.exit(1)

    print(f"‚úÖ Fichier SQL charg√© ({len(sql_content)} caract√®res)\n")

    # Message important
    print("="*70)
    print("‚ö†Ô∏è  IMPORTANT - INSTRUCTIONS POUR SUPABASE")
    print("="*70)
    print()
    print("Supabase ne permet pas l'ex√©cution directe de SQL DDL via l'API.")
    print("Vous devez ex√©cuter le SQL manuellement via le dashboard Supabase:")
    print()
    print("1. Ouvrez votre projet Supabase: https://app.supabase.com")
    print("2. Allez dans 'SQL Editor' dans le menu de gauche")
    print("3. Cr√©ez une nouvelle requ√™te")
    print("4. Copiez-collez le contenu du fichier: create_subscription_tables.sql")
    print("5. Cliquez sur 'Run' pour ex√©cuter")
    print()
    print("Le fichier contient:")
    print("  ‚úÖ Cr√©ation de 8 tables (subscription_plans, subscriptions, etc.)")
    print("  ‚úÖ Cr√©ation des index pour performance")
    print("  ‚úÖ Cr√©ation des triggers pour updated_at")
    print("  ‚úÖ Insertion des plans par d√©faut (Freemium, Standard, Premium, etc.)")
    print("  ‚úÖ Insertion de coupons de lancement")
    print()
    print("="*70)
    print()

    response = input("‚ùì Avez-vous d√©j√† ex√©cut√© le SQL dans Supabase? (yes/no): ")

    if response.lower() == 'yes':
        print("\n‚úÖ Parfait! Le syst√®me d'abonnement devrait √™tre op√©rationnel.")
        print()
        print("üéâ INSTALLATION TERMIN√âE!")
        print()
        print("üìù Prochaines √©tapes:")
        print("  1. Configurez vos cl√©s Stripe dans le fichier .env:")
        print("     STRIPE_SECRET_KEY=sk_test_...")
        print("     STRIPE_WEBHOOK_SECRET=whsec_...")
        print()
        print("  2. Installez les nouvelles d√©pendances:")
        print("     pip install -r requirements.txt")
        print()
        print("  3. Red√©marrez votre serveur:")
        print("     python server.py")
        print()
        print("  4. Testez les endpoints d'abonnement:")
        print("     http://localhost:8001/docs")
        print()
        print("="*70)

    else:
        print("\nüí° Veuillez ex√©cuter le SQL dans Supabase, puis relancez ce script.")
        print()
        print("üìÑ Le fichier SQL se trouve ici: ./create_subscription_tables.sql")
        print()
        sys.exit(0)


def create_example_env():
    """Cr√©e un fichier .env.example avec les variables n√©cessaires"""
    env_content = """
# ============================================
# SYST√àME D'ABONNEMENT SaaS - Configuration
# ============================================

# Stripe (Paiements)
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key_here
STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key_here
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret_here

# Supabase (d√©j√† configur√©)
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_ANON_KEY=your_anon_key_here
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key_here

# JWT (d√©j√† configur√©)
JWT_SECRET=your_jwt_secret_here
JWT_ALGORITHM=HS256
JWT_EXPIRATION_HOURS=24
"""

    try:
        with open('.env.subscription.example', 'w') as f:
            f.write(env_content.strip())
        print("‚úÖ Fichier .env.subscription.example cr√©√©")
    except Exception as e:
        print(f"‚ö†Ô∏è  Impossible de cr√©er .env.subscription.example: {e}")


if __name__ == "__main__":
    try:
        main()
        create_example_env()
    except KeyboardInterrupt:
        print("\n\n‚ùå Op√©ration annul√©e par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
