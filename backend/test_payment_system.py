"""
Script de test pour le syst√®me de paiement automatique
Cr√©e des donn√©es de test et ex√©cute les fonctions
"""

from datetime import datetime, timedelta
from supabase_client import supabase
from auto_payment_service import AutoPaymentService
import uuid

def create_test_data():
    """Cr√©e des donn√©es de test"""
    print("\nüß™ CR√âATION DES DONN√âES DE TEST")
    print("="*60)
    
    try:
        # 1. Cr√©er un influenceur de test
        test_user = {
            "email": f"test_influencer_{uuid.uuid4().hex[:8]}@test.com",
            "password_hash": "$2b$12$test",
            "role": "influencer",
            "is_active": True
        }
        
        user_result = supabase.table('users').insert(test_user).execute()
        user_id = user_result.data[0]['id']
        print(f"‚úÖ Utilisateur cr√©√©: {user_id}")
        
        # 2. Cr√©er le profil influenceur
        test_influencer = {
            "user_id": user_id,
            "username": f"test_user_{uuid.uuid4().hex[:6]}",
            "full_name": "Test Influencer",
            "balance": 0.0,
            "total_earnings": 0.0,
            "payment_method": "paypal",
            "payment_details": {"email": "test@paypal.com"}
        }
        
        inf_result = supabase.table('influencers').insert(test_influencer).execute()
        influencer_id = inf_result.data[0]['id']
        print(f"‚úÖ Influenceur cr√©√©: {influencer_id}")
        
        # 3. Cr√©er un produit de test
        test_product = {
            "name": "Produit Test",
            "price": 100.00,
            "commission_rate": 15.00,
            "is_available": True
        }
        
        prod_result = supabase.table('products').insert(test_product).execute()
        product_id = prod_result.data[0]['id']
        print(f"‚úÖ Produit cr√©√©: {product_id}")
        
        # 4. Cr√©er des ventes de test
        print("\nüì¶ Cr√©ation de ventes de test...")
        
        # Vente 1: Ancienne (sera valid√©e)
        old_date = (datetime.now() - timedelta(days=20)).isoformat()
        sale1 = {
            "product_id": product_id,
            "influencer_id": influencer_id,
            "amount": 100.00,
            "influencer_commission": 15.00,
            "platform_commission": 5.00,
            "merchant_revenue": 80.00,
            "status": "pending",
            "payment_status": "pending",
            "created_at": old_date
        }
        
        supabase.table('sales').insert(sale1).execute()
        print(f"  ‚úÖ Vente ancienne cr√©√©e (sera valid√©e)")
        
        # Vente 2: R√©cente (ne sera pas valid√©e)
        recent_date = (datetime.now() - timedelta(days=5)).isoformat()
        sale2 = {
            "product_id": product_id,
            "influencer_id": influencer_id,
            "amount": 80.00,
            "influencer_commission": 12.00,
            "platform_commission": 4.00,
            "merchant_revenue": 64.00,
            "status": "pending",
            "payment_status": "pending",
            "created_at": recent_date
        }
        
        supabase.table('sales').insert(sale2).execute()
        print(f"  ‚úÖ Vente r√©cente cr√©√©e (ne sera pas valid√©e)")
        
        # Vente 3: Ancienne (sera valid√©e)
        sale3 = {
            "product_id": product_id,
            "influencer_id": influencer_id,
            "amount": 120.00,
            "influencer_commission": 18.00,
            "platform_commission": 6.00,
            "merchant_revenue": 96.00,
            "status": "pending",
            "payment_status": "pending",
            "created_at": old_date
        }
        
        supabase.table('sales').insert(sale3).execute()
        print(f"  ‚úÖ Vente ancienne 2 cr√©√©e (sera valid√©e)")
        
        # Vente 4: D√©j√† compl√®te (pour le solde)
        sale4 = {
            "product_id": product_id,
            "influencer_id": influencer_id,
            "amount": 150.00,
            "influencer_commission": 22.50,
            "platform_commission": 7.50,
            "merchant_revenue": 120.00,
            "status": "completed",
            "payment_status": "pending",
            "created_at": old_date
        }
        
        supabase.table('sales').insert(sale4).execute()
        
        # Mettre √† jour le solde de l'influenceur avec la vente d√©j√† compl√®te
        supabase.table('influencers').update({
            "balance": 22.50,
            "total_earnings": 22.50
        }).eq('id', influencer_id).execute()
        
        print(f"  ‚úÖ Vente compl√®te cr√©√©e (solde initial: 22.50‚Ç¨)")
        
        print(f"\n‚úÖ Donn√©es de test cr√©√©es avec succ√®s!")
        print(f"\nüìä R√©sum√©:")
        print(f"   - Influenceur ID: {influencer_id}")
        print(f"   - Solde initial: 22.50‚Ç¨")
        print(f"   - Ventes en attente: 2 (33‚Ç¨ total)")
        print(f"   - Apr√®s validation: 55.50‚Ç¨ (‚â• 50‚Ç¨ = √©ligible paiement)")
        
        return {
            "user_id": user_id,
            "influencer_id": influencer_id,
            "product_id": product_id
        }
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation donn√©es test: {e}")
        return None


def test_validation():
    """Test de la validation automatique"""
    print("\n" + "="*60)
    print("TEST 1: VALIDATION AUTOMATIQUE DES VENTES")
    print("="*60)
    
    service = AutoPaymentService()
    result = service.validate_pending_sales()
    
    if result.get('success'):
        print(f"\n‚úÖ TEST R√âUSSI")
        print(f"   - Ventes valid√©es: {result.get('validated_sales', 0)}")
        print(f"   - Commission totale: {result.get('total_commission', 0)}‚Ç¨")
        print(f"   - Influenceurs mis √† jour: {result.get('influencers_updated', 0)}")
    else:
        print(f"\n‚ùå TEST √âCHOU√â")
        print(f"   Erreur: {result.get('error')}")
    
    return result


def test_payouts():
    """Test des paiements automatiques"""
    print("\n" + "="*60)
    print("TEST 2: PAIEMENTS AUTOMATIQUES")
    print("="*60)
    
    service = AutoPaymentService()
    result = service.process_automatic_payouts()
    
    if result.get('success'):
        print(f"\n‚úÖ TEST R√âUSSI")
        print(f"   - Paiements trait√©s: {result.get('processed_count', 0)}")
        print(f"   - Montant total: {result.get('total_paid', 0)}‚Ç¨")
        print(f"   - √âchecs: {result.get('failed_count', 0)}")
        
        if result.get('failed_count', 0) > 0:
            print(f"\n‚ö†Ô∏è  PAIEMENTS √âCHOU√âS:")
            for failure in result.get('failed_payments', []):
                print(f"      - {failure}")
    else:
        print(f"\n‚ùå TEST √âCHOU√â")
        print(f"   Erreur: {result.get('error')}")
    
    return result


def test_refund(test_data):
    """Test du syst√®me de remboursement"""
    print("\n" + "="*60)
    print("TEST 3: REMBOURSEMENT")
    print("="*60)
    
    if not test_data:
        print("‚ùå Pas de donn√©es de test disponibles")
        return
    
    try:
        # R√©cup√©rer une vente compl√©t√©e
        sales = supabase.table('sales').select('id, influencer_commission').eq(
            'influencer_id', test_data['influencer_id']
        ).eq('status', 'completed').limit(1).execute()
        
        if not sales.data:
            print("‚ö†Ô∏è  Aucune vente compl√©t√©e trouv√©e pour test de remboursement")
            return
        
        sale_id = sales.data[0]['id']
        commission = sales.data[0]['influencer_commission']
        
        print(f"\nüì¶ Test de remboursement pour vente: {sale_id}")
        print(f"   Commission √† annuler: {commission}‚Ç¨")
        
        service = AutoPaymentService()
        result = service.process_refund(sale_id, "test_refund")
        
        if result.get('success'):
            print(f"\n‚úÖ TEST R√âUSSI")
            print(f"   - Vente rembours√©e: {sale_id}")
            print(f"   - Commission annul√©e: {result.get('commission_cancelled')}‚Ç¨")
        else:
            print(f"\n‚ùå TEST √âCHOU√â")
            print(f"   Erreur: {result.get('error')}")
        
    except Exception as e:
        print(f"‚ùå Erreur test remboursement: {e}")


def cleanup_test_data(test_data):
    """Nettoie les donn√©es de test"""
    print("\n" + "="*60)
    print("NETTOYAGE DES DONN√âES DE TEST")
    print("="*60)
    
    if not test_data:
        print("‚ö†Ô∏è  Pas de donn√©es √† nettoyer")
        return
    
    try:
        # Supprimer en ordre inverse des d√©pendances
        
        # 1. Supprimer les ventes
        supabase.table('sales').delete().eq('influencer_id', test_data['influencer_id']).execute()
        print("‚úÖ Ventes supprim√©es")
        
        # 2. Supprimer les commissions
        supabase.table('commissions').delete().eq('influencer_id', test_data['influencer_id']).execute()
        print("‚úÖ Commissions supprim√©es")
        
        # 3. Supprimer les payouts
        supabase.table('payouts').delete().eq('influencer_id', test_data['influencer_id']).execute()
        print("‚úÖ Payouts supprim√©s")
        
        # 4. Supprimer l'influenceur
        supabase.table('influencers').delete().eq('id', test_data['influencer_id']).execute()
        print("‚úÖ Influenceur supprim√©")
        
        # 5. Supprimer l'utilisateur
        supabase.table('users').delete().eq('id', test_data['user_id']).execute()
        print("‚úÖ Utilisateur supprim√©")
        
        # 6. Supprimer le produit
        supabase.table('products').delete().eq('id', test_data['product_id']).execute()
        print("‚úÖ Produit supprim√©")
        
        print("\n‚úÖ Nettoyage termin√©")
        
    except Exception as e:
        print(f"‚ùå Erreur nettoyage: {e}")


def main():
    """Fonction principale de test"""
    print("\n" + "="*60)
    print("üß™ TESTS DU SYST√àME DE PAIEMENT AUTOMATIQUE")
    print("="*60)
    print("\nCe script va:")
    print("1. Cr√©er des donn√©es de test")
    print("2. Tester la validation automatique")
    print("3. Tester les paiements automatiques")
    print("4. Tester le syst√®me de remboursement")
    print("5. Nettoyer les donn√©es de test")
    
    input("\nAppuyez sur ENTR√âE pour continuer...")
    
    # Cr√©er les donn√©es
    test_data = create_test_data()
    
    if not test_data:
        print("\n‚ùå Impossible de cr√©er les donn√©es de test. Arr√™t.")
        return
    
    input("\n\nAppuyez sur ENTR√âE pour tester la validation...")
    
    # Test 1: Validation
    validation_result = test_validation()
    
    input("\n\nAppuyez sur ENTR√âE pour tester les paiements...")
    
    # Test 2: Paiements
    payout_result = test_payouts()
    
    input("\n\nAppuyez sur ENTR√âE pour tester le remboursement...")
    
    # Test 3: Remboursement
    test_refund(test_data)
    
    # Proposer le nettoyage
    print("\n" + "="*60)
    cleanup = input("\nVoulez-vous nettoyer les donn√©es de test ? (o/N): ")
    
    if cleanup.lower() == 'o':
        cleanup_test_data(test_data)
    else:
        print("\n‚ö†Ô∏è  Donn√©es de test conserv√©es")
        print(f"   Influenceur ID: {test_data.get('influencer_id')}")
    
    print("\n" + "="*60)
    print("‚úÖ TESTS TERMIN√âS")
    print("="*60 + "\n")


if __name__ == "__main__":
    main()
