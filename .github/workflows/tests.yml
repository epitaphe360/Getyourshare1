name: Tests & Quality Checks

on:
  push:
    branches: [ main, develop, claude/** ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # ============================================
  # TESTS BACKEND
  # ============================================
  backend-tests:
    name: Backend Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    services:
      # PostgreSQL pour tests
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: shareyoursales_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Redis pour tests
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run tests with pytest
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/shareyoursales_test
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET: test-secret-for-ci
        TESTING: "1"
      run: |
        pytest -v --cov=backend --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  # ============================================
  # CODE QUALITY - LINTING
  # ============================================
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements-dev.txt

    - name: Black formatting check
      run: |
        black --check backend/

    - name: isort import sorting check
      run: |
        isort --check-only backend/

    - name: Flake8 linting
      run: |
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Pylint
      run: |
        pylint backend/ --exit-zero --rcfile=.pylintrc

    - name: MyPy type checking
      run: |
        mypy backend/ --ignore-missing-imports --no-strict-optional

  # ============================================
  # SECURITY CHECKS
  # ============================================
  security:
    name: Security Checks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install safety bandit

    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json

    - name: Bandit security linting
      run: |
        bandit -r backend/ -ll -f json -o bandit-report.json
        bandit -r backend/ -ll

    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  # ============================================
  # FRONTEND TESTS (TODO)
  # ============================================
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run linting
      working-directory: ./frontend
      run: npm run lint || echo "Linting not configured"

    - name: Run tests
      working-directory: ./frontend
      run: npm test || echo "Tests not yet implemented"

    - name: Build
      working-directory: ./frontend
      run: npm run build

  # ============================================
  # BUILD DOCKER IMAGES
  # ============================================
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: shareyoursales-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: shareyoursales-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ============================================
  # MERGE GATE
  # ============================================
  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [backend-tests, code-quality, security, frontend-tests, docker-build]

    steps:
    - name: All checks passed
      run: echo "âœ… All checks passed successfully!"
