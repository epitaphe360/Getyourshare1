name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ============================================================================
  # JOB 1: Lint Backend Python
  # ============================================================================
  lint-backend:
    name: Lint Backend (Python)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      
      - name: Run Ruff (linter)
        working-directory: ./backend
        run: |
          echo "Running Ruff linter..."
          ruff check . --output-format=github
        continue-on-error: true
      
      - name: Run Black (formatter check)
        working-directory: ./backend
        run: |
          echo "Checking code formatting with Black..."
          black --check --diff .
        continue-on-error: true
      
      - name: Run isort (import sorting check)
        working-directory: ./backend
        run: |
          echo "Checking import sorting with isort..."
          isort --check-only --diff .
        continue-on-error: true
      
      - name: Run mypy (type checking)
        working-directory: ./backend
        run: |
          echo "Running mypy type checker..."
          mypy services/ --ignore-missing-imports
        continue-on-error: true

  # ============================================================================
  # JOB 2: Test Backend Python
  # ============================================================================
  test-backend:
    name: Test Backend (pytest)
    runs-on: ubuntu-latest
    needs: lint-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run pytest with coverage
        working-directory: ./backend
        run: |
          pytest --cov=services --cov-report=xml --cov-report=term-missing --junitxml=junit.xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: backend/junit.xml

  # ============================================================================
  # JOB 3: Lint Frontend JavaScript/React
  # ============================================================================
  lint-frontend:
    name: Lint Frontend (ESLint/Prettier)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint || true
        continue-on-error: true
      
      - name: Run Prettier check
        working-directory: ./frontend
        run: npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}"
        continue-on-error: true

  # ============================================================================
  # JOB 4: Build Frontend
  # ============================================================================
  build-frontend:
    name: Build Frontend (React)
    runs-on: ubuntu-latest
    needs: lint-frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Build application
        working-directory: ./frontend
        run: npm run build
        env:
          CI: true
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/build
          retention-days: 7

  # ============================================================================
  # JOB 5: Security Scan
  # ============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # ============================================================================
  # JOB 6: Summary & Status
  # ============================================================================
  status-check:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [lint-backend, test-backend, lint-frontend, build-frontend]
    if: always()
    
    steps:
      - name: Check job statuses
        run: |
          echo "Lint Backend: ${{ needs.lint-backend.result }}"
          echo "Test Backend: ${{ needs.test-backend.result }}"
          echo "Lint Frontend: ${{ needs.lint-frontend.result }}"
          echo "Build Frontend: ${{ needs.build-frontend.result }}"
          
          if [[ "${{ needs.test-backend.result }}" != "success" ]]; then
            echo "::error::Backend tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.build-frontend.result }}" != "success" ]]; then
            echo "::error::Frontend build failed"
            exit 1
          fi
          
          echo "âœ… All critical checks passed!"
