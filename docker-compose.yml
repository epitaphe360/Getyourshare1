# ============================================
# Docker Compose - Development Environment
# ShareYourSales Platform
# ============================================

version: '3.8'

services:
  # ============================================
  # PostgreSQL Database
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: shareyoursales_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-shareyoursales}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=fr_FR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shareyoursales_network

  # ============================================
  # Redis (Cache + Rate Limiting + Sessions)
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: shareyoursales_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shareyoursales_network

  # ============================================
  # Backend FastAPI
  # ============================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: shareyoursales_backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # App
      ENVIRONMENT: development
      APP_VERSION: 1.0.0
      DEBUG: "true"

      # Database
      DATABASE_URL: postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}@postgres:5432/${DATABASE_NAME:-shareyoursales}

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0

      # JWT
      JWT_SECRET: ${JWT_SECRET:-change-me-in-production}
      JWT_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30

      # Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}

      # Instagram API
      INSTAGRAM_APP_ID: ${INSTAGRAM_APP_ID}
      INSTAGRAM_APP_SECRET: ${INSTAGRAM_APP_SECRET}
      INSTAGRAM_REDIRECT_URI: ${INSTAGRAM_REDIRECT_URI:-http://localhost:3000/auth/instagram/callback}

      # TikTok API
      TIKTOK_CLIENT_KEY: ${TIKTOK_CLIENT_KEY}
      TIKTOK_CLIENT_SECRET: ${TIKTOK_CLIENT_SECRET}
      TIKTOK_REDIRECT_URI: ${TIKTOK_REDIRECT_URI:-http://localhost:3000/auth/tiktok/callback}

      # Facebook API
      FACEBOOK_APP_ID: ${FACEBOOK_APP_ID}
      FACEBOOK_APP_SECRET: ${FACEBOOK_APP_SECRET}

      # Claude AI
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}

      # Sentry (optional en dev)
      SENTRY_DSN: ${SENTRY_DSN:-}

      # Email (optional en dev)
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}

      # Storage
      UPLOAD_DIR: /app/uploads
      MAX_UPLOAD_SIZE: 10485760  # 10MB

    volumes:
      - ./backend:/app
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    ports:
      - "8000:8000"
    networks:
      - shareyoursales_network
    command: uvicorn server:app --host 0.0.0.0 --port 8000 --reload

  # ============================================
  # Frontend React (Development)
  # ============================================
  frontend:
    image: node:18-alpine
    container_name: shareyoursales_frontend
    restart: unless-stopped
    working_dir: /app
    depends_on:
      - backend
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Anonymous volume pour node_modules
    ports:
      - "3000:3000"
    networks:
      - shareyoursales_network
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"

  # ============================================
  # Celery Worker (Background Tasks)
  # ============================================
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: shareyoursales_celery
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      DATABASE_URL: postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}@postgres:5432/${DATABASE_NAME:-shareyoursales}
    volumes:
      - ./backend:/app
    networks:
      - shareyoursales_network
    command: celery -A tasks worker --loglevel=info

  # ============================================
  # Celery Beat (Scheduler)
  # ============================================
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: shareyoursales_celery_beat
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      DATABASE_URL: postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}@postgres:5432/${DATABASE_NAME:-shareyoursales}
    volumes:
      - ./backend:/app
    networks:
      - shareyoursales_network
    command: celery -A tasks beat --loglevel=info

  # ============================================
  # pgAdmin (Optional - Database Management)
  # ============================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: shareyoursales_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@shareyoursales.ma}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - shareyoursales_network
    profiles:
      - tools  # Only start with: docker-compose --profile tools up

  # ============================================
  # Redis Commander (Optional - Redis GUI)
  # ============================================
  redis_commander:
    image: rediscommander/redis-commander:latest
    container_name: shareyoursales_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:1:${REDIS_PASSWORD:-redis_password}
    ports:
      - "8081:8081"
    networks:
      - shareyoursales_network
    profiles:
      - tools  # Only start with: docker-compose --profile tools up

# ============================================
# Networks
# ============================================
networks:
  shareyoursales_network:
    driver: bridge

# ============================================
# Volumes (Persistent Data)
# ============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  pgadmin_data:
    driver: local
