#!/bin/bash

# ============================================
# üöÄ INSTALLATION AUTOMATIQUE RAILWAY
# GetYourShare - D√©ploiement Production
# ============================================

set -e  # Arr√™t en cas d'erreur

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fonctions d'affichage
error() {
    echo -e "${RED}‚ùå $1${NC}"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

step() {
    echo -e "\n${PURPLE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${BLUE}üîπ $1${NC}"
    echo -e "${PURPLE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}\n"
}

banner() {
    echo -e "\n${CYAN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                                                            ‚ïë"
    echo "‚ïë        üöÄ GETYOURSHARE - D√âPLOIEMENT AUTOMATIQUE üöÄ       ‚ïë"
    echo "‚ïë                                                            ‚ïë"
    echo "‚ïë           Railway + Supabase + Production Ready            ‚ïë"
    echo "‚ïë                                                            ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}\n"
}

# Variables globales
BACKEND_URL=""
FRONTEND_URL=""
PROJECT_DIR=$(pwd)

# ============================================
# √âTAPE 0: V√©rifications Pr√©alables
# ============================================
check_prerequisites() {
    step "V√©rification des pr√©requis"

    # V√©rifier Git
    if ! command -v git &> /dev/null; then
        error "Git n'est pas install√©"
        exit 1
    fi
    success "Git install√©"

    # V√©rifier si on est dans le bon dossier
    if [ ! -f "DEPLOY_RAILWAY.md" ]; then
        error "Ce script doit √™tre ex√©cut√© depuis le dossier racine du projet"
        exit 1
    fi
    success "Dossier projet d√©tect√©"

    # V√©rifier si .env.production existe
    if [ ! -f ".env.production" ]; then
        error "Fichier .env.production non trouv√©"
        exit 1
    fi
    success "Fichier .env.production trouv√©"
}

# ============================================
# √âTAPE 1: Installation Railway CLI
# ============================================
install_railway_cli() {
    step "Installation de Railway CLI"

    if command -v railway &> /dev/null; then
        success "Railway CLI d√©j√† install√©"
        railway --version
        return
    fi

    info "Installation de Railway CLI..."

    # D√©tection du syst√®me d'exploitation
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        info "Syst√®me: Linux"
        bash <(curl -fsSL https://railway.app/install.sh)
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        info "Syst√®me: macOS"
        if command -v brew &> /dev/null; then
            brew install railway
        else
            bash <(curl -fsSL https://railway.app/install.sh)
        fi
    else
        error "Syst√®me non support√©. Installez manuellement: https://docs.railway.app/develop/cli"
        exit 1
    fi

    success "Railway CLI install√©"
}

# ============================================
# √âTAPE 2: Connexion √† Railway
# ============================================
login_railway() {
    step "Connexion √† Railway"

    if railway whoami &> /dev/null; then
        RAILWAY_USER=$(railway whoami)
        success "D√©j√† connect√© en tant que: $RAILWAY_USER"
        return
    fi

    info "Ouverture du navigateur pour connexion..."
    railway login

    if railway whoami &> /dev/null; then
        success "Connect√© √† Railway avec succ√®s"
    else
        error "√âchec de la connexion √† Railway"
        exit 1
    fi
}

# ============================================
# √âTAPE 3: Configuration Supabase
# ============================================
setup_supabase() {
    step "Configuration de Supabase"

    info "V√©rification de la connexion Supabase..."

    # Extraire les credentials depuis .env.production
    source .env.production

    if [ -z "$SUPABASE_URL" ]; then
        error "SUPABASE_URL non trouv√© dans .env.production"
        exit 1
    fi

    success "Supabase URL: $SUPABASE_URL"

    warning "√âTAPE MANUELLE REQUISE:"
    echo ""
    echo "   1. Ouvrez: https://app.supabase.com/project/iamezkmapbhlhhvvsits/editor"
    echo "   2. Cliquez sur 'New Query'"
    echo "   3. Copiez le contenu de: backend/create_subscription_tables.sql"
    echo "   4. Cliquez sur 'Run'"
    echo ""
    read -p "   Appuyez sur Entr√©e une fois les tables cr√©√©es..."

    success "Configuration Supabase termin√©e"
}

# ============================================
# √âTAPE 4: Cr√©ation du Projet Railway
# ============================================
create_railway_project() {
    step "Cr√©ation du projet Railway"

    info "Initialisation du projet Railway..."

    # V√©rifier si d√©j√† initialis√©
    if [ -d ".railway" ]; then
        warning "Projet Railway d√©j√† initialis√©"
        read -p "   Voulez-vous cr√©er un nouveau projet? (o/N): " response
        if [[ ! "$response" =~ ^[Oo]$ ]]; then
            info "Utilisation du projet existant"
            return
        fi
        rm -rf .railway
    fi

    # Cr√©er un nouveau projet
    railway init

    success "Projet Railway cr√©√©"
}

# ============================================
# √âTAPE 5: D√©ploiement du Backend
# ============================================
deploy_backend() {
    step "D√©ploiement du Backend"

    cd "$PROJECT_DIR/backend"

    info "Configuration du service backend..."

    # Cr√©er railway.toml s'il n'existe pas
    if [ ! -f "railway.toml" ]; then
        cat > railway.toml <<EOF
[build]
builder = "DOCKERFILE"
dockerfilePath = "Dockerfile"

[deploy]
startCommand = "uvicorn server:app --host 0.0.0.0 --port \$PORT --workers 4"
restartPolicyType = "ON_FAILURE"
restartPolicyMaxRetries = 10
healthcheckPath = "/health"
healthcheckTimeout = 100
EOF
    fi

    # Charger les variables depuis .env.production
    source "$PROJECT_DIR/.env.production"

    info "Configuration des variables d'environnement backend..."

    # Configurer les variables essentielles
    railway variables set SUPABASE_URL="$SUPABASE_URL" \
        SUPABASE_KEY="$SUPABASE_KEY" \
        SUPABASE_SERVICE_ROLE_KEY="$SUPABASE_SERVICE_ROLE_KEY" \
        JWT_SECRET_KEY="$JWT_SECRET_KEY" \
        JWT_ALGORITHM="HS256" \
        APP_ENV="production" \
        PORT="8001" \
        AUTO_PAYMENTS_ENABLED="true" \
        ALLOWED_ORIGINS="*"

    success "Variables backend configur√©es"

    info "D√©ploiement du backend en cours..."
    railway up --detach

    success "Backend d√©ploy√©"

    info "G√©n√©ration du domaine backend..."
    railway domain

    # R√©cup√©rer l'URL du backend
    sleep 5
    BACKEND_URL=$(railway domain 2>/dev/null | grep -oP 'https://[^ ]+' || echo "")

    if [ -n "$BACKEND_URL" ]; then
        success "Backend accessible sur: $BACKEND_URL"
    else
        warning "URL backend non r√©cup√©r√©e automatiquement"
        echo "Consultez: railway domain"
    fi

    cd "$PROJECT_DIR"
}

# ============================================
# √âTAPE 6: D√©ploiement du Frontend
# ============================================
deploy_frontend() {
    step "D√©ploiement du Frontend"

    cd "$PROJECT_DIR/frontend"

    info "Configuration du service frontend..."

    # Cr√©er railway.toml s'il n'existe pas
    if [ ! -f "railway.toml" ]; then
        cat > railway.toml <<EOF
[build]
builder = "DOCKERFILE"
dockerfilePath = "Dockerfile"

[deploy]
restartPolicyType = "ON_FAILURE"
restartPolicyMaxRetries = 10
healthcheckPath = "/health"
healthcheckTimeout = 100
EOF
    fi

    # Charger les variables
    source "$PROJECT_DIR/.env.production"

    info "Configuration des variables d'environnement frontend..."

    # Configurer les variables frontend
    railway variables set REACT_APP_SUPABASE_URL="$REACT_APP_SUPABASE_URL" \
        REACT_APP_SUPABASE_ANON_KEY="$REACT_APP_SUPABASE_ANON_KEY" \
        REACT_APP_ENVIRONMENT="production" \
        PORT="80"

    # Ajouter l'URL du backend si disponible
    if [ -n "$BACKEND_URL" ]; then
        railway variables set REACT_APP_API_URL="$BACKEND_URL"
    fi

    success "Variables frontend configur√©es"

    info "D√©ploiement du frontend en cours..."
    railway up --detach

    success "Frontend d√©ploy√©"

    info "G√©n√©ration du domaine frontend..."
    railway domain

    # R√©cup√©rer l'URL du frontend
    sleep 5
    FRONTEND_URL=$(railway domain 2>/dev/null | grep -oP 'https://[^ ]+' || echo "")

    if [ -n "$FRONTEND_URL" ]; then
        success "Frontend accessible sur: $FRONTEND_URL"
    else
        warning "URL frontend non r√©cup√©r√©e automatiquement"
        echo "Consultez: railway domain"
    fi

    cd "$PROJECT_DIR"
}

# ============================================
# √âTAPE 7: Configuration CORS
# ============================================
configure_cors() {
    step "Configuration CORS"

    if [ -z "$FRONTEND_URL" ]; then
        warning "URL frontend non disponible, CORS non configur√©"
        return
    fi

    cd "$PROJECT_DIR/backend"

    info "Mise √† jour de ALLOWED_ORIGINS..."
    railway variables set ALLOWED_ORIGINS="$FRONTEND_URL"

    success "CORS configur√©"

    cd "$PROJECT_DIR"
}

# ============================================
# √âTAPE 8: V√©rification du D√©ploiement
# ============================================
verify_deployment() {
    step "V√©rification du d√©ploiement"

    if [ -n "$BACKEND_URL" ]; then
        info "Test du backend..."
        sleep 10  # Attendre que le service d√©marre

        if curl -f "$BACKEND_URL/health" &> /dev/null; then
            success "Backend op√©rationnel ‚úì"
        else
            warning "Backend en cours de d√©marrage (peut prendre 2-3 minutes)..."
        fi
    fi

    if [ -n "$FRONTEND_URL" ]; then
        info "Test du frontend..."
        if curl -f "$FRONTEND_URL/health" &> /dev/null; then
            success "Frontend op√©rationnel ‚úì"
        else
            warning "Frontend en cours de d√©marrage (peut prendre 2-3 minutes)..."
        fi
    fi
}

# ============================================
# √âTAPE 9: R√©sum√© Final
# ============================================
show_summary() {
    step "üéâ D√©ploiement Termin√©!"

    echo -e "${GREEN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                                                            ‚ïë"
    echo "‚ïë              ‚úÖ D√âPLOIEMENT R√âUSSI! ‚úÖ                    ‚ïë"
    echo "‚ïë                                                            ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}\n"

    info "üìå URLs de votre application:"
    echo ""

    if [ -n "$BACKEND_URL" ]; then
        echo -e "   ${CYAN}Backend API:${NC}     $BACKEND_URL"
        echo -e "   ${CYAN}API Docs:${NC}        $BACKEND_URL/docs"
    else
        echo -e "   ${YELLOW}Backend:${NC}         Consultez 'railway domain' dans backend/"
    fi

    if [ -n "$FRONTEND_URL" ]; then
        echo -e "   ${CYAN}Frontend App:${NC}    $FRONTEND_URL"
    else
        echo -e "   ${YELLOW}Frontend:${NC}        Consultez 'railway domain' dans frontend/"
    fi

    echo ""
    info "üìä Dashboards:"
    echo "   - Supabase:  https://app.supabase.com/project/iamezkmapbhlhhvvsits"
    echo "   - Railway:   https://railway.app/dashboard"
    echo ""

    info "üîß Prochaines √©tapes:"
    echo "   1. Configurer Stripe (STRIPE_SECRET_KEY dans Railway)"
    echo "   2. Configurer Email SMTP (Gmail App Password)"
    echo "   3. Tester les dashboards"
    echo "   4. Configurer un domaine personnalis√© (optionnel)"
    echo ""

    success "Installation termin√©e! üéä"
    echo ""
}

# ============================================
# FONCTION PRINCIPALE
# ============================================
main() {
    banner

    # Menu de d√©marrage
    echo "Que voulez-vous faire?"
    echo ""
    echo "  1) Installation compl√®te automatique (Recommand√©)"
    echo "  2) D√©ployer backend uniquement"
    echo "  3) D√©ployer frontend uniquement"
    echo "  4) Configuration Supabase uniquement"
    echo "  5) Annuler"
    echo ""
    read -p "Votre choix (1-5): " choice

    case $choice in
        1)
            check_prerequisites
            install_railway_cli
            login_railway
            setup_supabase
            create_railway_project
            deploy_backend
            deploy_frontend
            configure_cors
            verify_deployment
            show_summary
            ;;
        2)
            check_prerequisites
            install_railway_cli
            login_railway
            create_railway_project
            deploy_backend
            verify_deployment
            echo ""
            success "Backend d√©ploy√©: $BACKEND_URL"
            ;;
        3)
            check_prerequisites
            install_railway_cli
            login_railway
            create_railway_project
            deploy_frontend
            verify_deployment
            echo ""
            success "Frontend d√©ploy√©: $FRONTEND_URL"
            ;;
        4)
            setup_supabase
            ;;
        5)
            info "Installation annul√©e"
            exit 0
            ;;
        *)
            error "Choix invalide"
            exit 1
            ;;
    esac
}

# Ex√©cution
main
